class HostController {
    constructor() {
        this.socket = io({
            transports: ['websocket', 'polling'],
            reconnection: true,
            reconnectionAttempts: 10,
            reconnectionDelay: 1000
        });
        
        this.sessionId = null;
        this.localStream = null;
        this.peerConnections = new Map();
        
        // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WebRTC
        this.configuration = {
            iceServers: [
                { urls: 'stun:stun.l.google.com:19302' },
                { urls: 'stun:stun1.l.google.com:19302' },
                { urls: 'stun:stun2.l.google.com:19302' },
                { urls: 'stun:stun3.l.google.com:19302' },
                // –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ TURN —Å–µ—Ä–≤–µ—Ä—ã –¥–ª—è –æ–±—Ö–æ–¥–∞ NAT
                {
                    urls: 'turn:openrelay.metered.ca:80',
                    username: 'openrelayproject',
                    credential: 'openrelayproject'
                },
                {
                    urls: 'turn:openrelay.metered.ca:443', 
                    username: 'openrelayproject',
                    credential: 'openrelayproject'
                },
                {
                    urls: 'turn:openrelay.metered.ca:443?transport=tcp',
                    username: 'openrelayproject',
                    credential: 'openrelayproject'
                }
            ],
            iceCandidatePoolSize: 10,
            bundlePolicy: 'max-bundle',
            rtcpMuxPolicy: 'require'
        };

        this.serverInfo = null;

        this.initializeElements();
        this.initializeEventListeners();
        this.initializeSocketListeners();
        this.getServerInfo();
        this.startHosting();
    }

    initializeElements() {
        this.statusIndicator = document.getElementById('statusIndicator');
        this.statusText = this.statusIndicator.querySelector('.status-text');
        this.statusDot = this.statusIndicator.querySelector('.status-dot');
        this.sessionIdElement = document.getElementById('sessionId');
        this.connectedClientsElement = document.getElementById('connectedClients');
        this.streamStatusElement = document.getElementById('streamStatus');
        this.localVideo = document.getElementById('localVideo');
        this.copyBtn = document.getElementById('copyBtn');
        this.stopHostingBtn = document.getElementById('stopHostingBtn');
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
        this.createConnectionInfoElement();
    }

    createConnectionInfoElement() {
        const sessionInfo = document.querySelector('.session-info');
        this.connectionInfo = document.createElement('div');
        this.connectionInfo.className = 'connection-info';
        this.connectionInfo.innerHTML = `
            <h3>–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</h3>
            <div class="connection-url">
                <input type="text" id="connectionUrl" readonly value="–ó–∞–≥—Ä—É–∑–∫–∞...">
                <button id="copyUrlBtn" class="btn-secondary">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É</button>
            </div>
            <p class="connection-help">
                –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–≥—É –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞ –¥—Ä—É–≥–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
            </p>
            <div class="session-stats">
                <div class="stat-item">
                    <span class="stat-label">–°—Ç–∞—Ç—É—Å:</span>
                    <span class="stat-value" id="sessionStatus">–ù–µ–∞–∫—Ç–∏–≤–Ω–∞</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label">–ö–ª–∏–µ–Ω—Ç–æ–≤:</span>
                    <span class="stat-value" id="sessionClients">0</span>
                </div>
            </div>
        `;
        sessionInfo.appendChild(this.connectionInfo);
    }

    initializeEventListeners() {
        this.copyBtn.addEventListener('click', () => this.copySessionId());
        this.stopHostingBtn.addEventListener('click', () => this.stopHosting());
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
        document.addEventListener('click', (e) => {
            if (e.target.id === 'copyUrlBtn') {
                this.copyConnectionUrl();
            }
        });
    }

    initializeSocketListeners() {
        this.socket.on('connect', () => {
            console.log('‚úÖ Connected to server as host');
            this.updateStatus('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É', 'connected');
        });

        this.socket.on('disconnect', () => {
            this.updateStatus('–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞', 'disconnected');
        });

        this.socket.on('session-created', (data) => {
            this.sessionId = data.sessionId;
            this.sessionIdElement.textContent = this.sessionId;
            this.updateStatus('–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞...', 'waiting');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            this.updateConnectionInfo(data.connectionUrl);
            this.updateSessionStats('–ê–∫—Ç–∏–≤–Ω–∞', '0');
        });

        this.socket.on('client-connected', (data) => {
            this.updateConnectedClients(data.totalClients);
            this.updateSessionStats('–ê–∫—Ç–∏–≤–Ω–∞', data.totalClients);
            this.createPeerConnection(data.clientId);
            this.updateStatus('–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω!', 'connected');
        });

        this.socket.on('client-disconnected', (data) => {
            this.updateConnectedClients(data.totalClients);
            this.updateSessionStats('–ê–∫—Ç–∏–≤–Ω–∞', data.totalClients);
            this.peerConnections.delete(data.clientId);
            
            if (data.totalClients === 0) {
                this.updateStatus('–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...', 'waiting');
            }
        });

        this.socket.on('webrtc-offer', async (data) => {
            await this.handleOffer(data.sender, data.offer);
        });

        this.socket.on('webrtc-answer', async (data) => {
            await this.handleAnswer(data.sender, data.answer);
        });

        this.socket.on('ice-candidate', (data) => {
            this.handleIceCandidate(data.sender, data.candidate);
        });

        this.socket.on('client-input', (data) => {
            console.log('üéÆ Input received from client:', data);
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–≤–æ–¥–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            // –ù–∞–ø—Ä–∏–º–µ—Ä, —ç–º—É–ª—è—Ü–∏—é –Ω–∞–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏—à –Ω–∞ —Ö–æ—Å—Ç–µ
        });

        this.socket.on('session-ended', (data) => {
            alert(`–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${data.reason}`);
            this.stopHosting();
        });
    }

    async getServerInfo() {
        try {
            const response = await fetch('/api/server-info');
            const data = await response.json();
            this.serverInfo = data;
            console.log('Server info:', data);
        } catch (error) {
            console.error('Failed to get server info:', error);
        }
    }

    async startHosting() {
        try {
            this.updateStatus('–ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –∫ —ç–∫—Ä–∞–Ω—É...', 'waiting');
            
            // –£–õ–£–ß–®–ï–ù–ù–´–ô –∑–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –∫ —ç–∫—Ä–∞–Ω—É
            this.localStream = await navigator.mediaDevices.getDisplayMedia({
                video: {
                    cursor: 'always',
                    displaySurface: 'monitor',
                    frameRate: { ideal: 30, max: 60 },
                    width: { ideal: 1280, max: 1920 },
                    height: { ideal: 720, max: 1080 }
                },
                audio: {
                    echoCancellation: true,
                    noiseSuppression: true,
                    sampleRate: 44100,
                    channelCount: 2
                },
                selfBrowserSurface: "exclude",
                systemAudio: "include",
                surfaceSwitching: "include"
            });

            console.log('üé• Screen capture started:', this.localStream);

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            this.localStream.getVideoTracks()[0].onended = () => {
                console.log('üõë User stopped screen sharing');
                this.stopHosting();
            };

            this.localVideo.srcObject = this.localStream;
            this.streamStatusElement.textContent = '–ê–∫—Ç–∏–≤–µ–Ω';
            
            // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏
            setTimeout(() => {
                // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞
                this.socket.emit('create-session', {
                    game: 'Desktop Stream',
                    resolution: '1280x720',
                    fps: 30
                });
                this.updateStatus('–°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–µ—Ç—Å—è...', 'waiting');
            }, 1000);

        } catch (error) {
            console.error('‚ùå Error starting hosting:', error);
            this.updateStatus('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏', 'error');
            
            if (error.name === 'NotAllowedError') {
                alert('‚ùå –î–æ—Å—Ç—É–ø –∫ —ç–∫—Ä–∞–Ω—É –∑–∞–ø—Ä–µ—â–µ–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.');
            } else if (error.name === 'NotFoundError') {
                alert('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ —ç–∫—Ä–∞–Ω–∞.');
            } else if (error.name === 'NotSupportedError') {
                alert('‚ùå –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞—Ö–≤–∞—Ç —ç–∫—Ä–∞–Ω–∞.');
            } else {
                alert('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é: ' + error.message);
            }
        }
    }

    async createPeerConnection(clientId) {
        try {
            console.log(`üîó Creating peer connection for client: ${clientId}`);
            
            const peerConnection = new RTCPeerConnection(this.configuration);

            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ç—Ä–µ–∫–∏ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∞
            this.localStream.getTracks().forEach(track => {
                console.log(`üéØ Adding track: ${track.kind}`, track);
                peerConnection.addTrack(track, this.localStream);
            });

            // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –æ–±—Ä–∞–±–æ—Ç–∫–∞ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            peerConnection.onicecandidate = (event) => {
                if (event.candidate) {
                    console.log('‚ùÑÔ∏è Sending ICE candidate to:', clientId);
                    this.socket.emit('ice-candidate', {
                        target: clientId,
                        candidate: event.candidate
                    });
                } else {
                    console.log('‚úÖ All ICE candidates gathered');
                }
            };

            peerConnection.onconnectionstatechange = () => {
                const state = peerConnection.connectionState;
                console.log(`üîó Connection state with ${clientId}: ${state}`);
                
                switch(state) {
                    case 'connected':
                        this.updateStatus('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!', 'connected');
                        break;
                    case 'disconnected':
                        this.updateStatus('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ', 'waiting');
                        break;
                    case 'failed':
                        this.updateStatus('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', 'error');
                        console.error('‚ùå WebRTC connection failed');
                        break;
                    case 'closed':
                        console.log('üîí WebRTC connection closed');
                        break;
                }
            };

            peerConnection.onsignalingstatechange = () => {
                console.log(`üì° Signaling state: ${peerConnection.signalingState}`);
            };

            peerConnection.oniceconnectionstatechange = () => {
                console.log(`‚ùÑÔ∏è ICE connection state: ${peerConnection.iceConnectionState}`);
            };

            // –°–æ–∑–¥–∞–Ω–∏–µ offer —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            const offer = await peerConnection.createOffer({
                offerToReceiveAudio: false,
                offerToReceiveVideo: false,
                iceRestart: false
            });
            
            await peerConnection.setLocalDescription(offer);
            console.log('üì® Created offer:', offer.type);

            this.socket.emit('webrtc-offer', {
                target: clientId,
                offer: offer,
                sender: this.socket.id
            });

            this.peerConnections.set(clientId, peerConnection);
            console.log(`‚úÖ Peer connection created for client: ${clientId}`);

        } catch (error) {
            console.error('‚ùå Error creating peer connection:', error);
            this.updateStatus('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è', 'error');
        }
    }

    async handleOffer(clientId, offer) {
        try {
            if (!this.peerConnections.has(clientId)) {
                await this.createPeerConnection(clientId);
            }

            const peerConnection = this.peerConnections.get(clientId);
            await peerConnection.setRemoteDescription(offer);
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫–∏ –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
            if (this.localStream) {
                this.localStream.getTracks().forEach(track => {
                    const existingSender = peerConnection.getSenders().find(
                        sender => sender.track && sender.track.kind === track.kind
                    );
                    if (!existingSender) {
                        peerConnection.addTrack(track, this.localStream);
                    }
                });
            }

            const answer = await peerConnection.createAnswer();
            await peerConnection.setLocalDescription(answer);

            this.socket.emit('webrtc-answer', {
                target: clientId,
                answer: answer
            });

        } catch (error) {
            console.error('Error handling offer:', error);
        }
    }

    async handleAnswer(clientId, answer) {
        try {
            const peerConnection = this.peerConnections.get(clientId);
            if (peerConnection) {
                await peerConnection.setRemoteDescription(answer);
            }
        } catch (error) {
            console.error('Error handling answer:', error);
        }
    }

    handleIceCandidate(clientId, candidate) {
        try {
            const peerConnection = this.peerConnections.get(clientId);
            if (peerConnection && candidate) {
                peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
            }
        } catch (error) {
            console.error('Error adding ICE candidate:', error);
        }
    }

    updateStatus(text, status) {
        this.statusText.textContent = text;
        this.statusDot.className = 'status-dot';
        
        switch (status) {
            case 'connected':
                this.statusDot.classList.add('connected');
                break;
            case 'waiting':
                this.statusDot.classList.add('waiting');
                break;
            case 'error':
                this.statusDot.classList.add('error');
                break;
            case 'disconnected':
                this.statusDot.classList.add('disconnected');
                break;
        }
    }

    updateConnectedClients(count) {
        this.connectedClientsElement.textContent = `${count}/5`;
    }

    updateConnectionInfo(connectionUrl) {
        const urlInput = document.getElementById('connectionUrl');
        if (urlInput) {
            urlInput.value = connectionUrl;
        }
    }

    updateSessionStats(status, clients) {
        const statusElement = document.getElementById('sessionStatus');
        const clientsElement = document.getElementById('sessionClients');
        
        if (statusElement) statusElement.textContent = status;
        if (clientsElement) clientsElement.textContent = clients;
    }

    copySessionId() {
        if (this.sessionId) {
            navigator.clipboard.writeText(this.sessionId).then(() => {
                this.showTempMessage('ID —Å–µ—Å—Å–∏–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!', this.copyBtn);
            }).catch(err => {
                console.error('Failed to copy session ID:', err);
            });
        }
    }

    copyConnectionUrl() {
        const urlInput = document.getElementById('connectionUrl');
        if (urlInput && urlInput.value !== '–ó–∞–≥—Ä—É–∑–∫–∞...') {
            navigator.clipboard.writeText(urlInput.value).then(() => {
                this.showTempMessage('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!', document.getElementById('copyUrlBtn'));
            }).catch(err => {
                console.error('Failed to copy URL:', err);
            });
        }
    }

    showTempMessage(message, element) {
        const originalText = element.textContent;
        element.textContent = message;
        element.disabled = true;
        
        setTimeout(() => {
            element.textContent = originalText;
            element.disabled = false;
        }, 2000);
    }

    stopHosting() {
        console.log('üõë Stopping hosting...');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç—Ä–µ–∫–∏
        if (this.localStream) {
            this.localStream.getTracks().forEach(track => {
                track.stop();
                track.onended = null; // –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            });
            this.localStream = null;
        }

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ peer —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        this.peerConnections.forEach((pc, clientId) => {
            pc.close();
            console.log(`Closed peer connection for client: ${clientId}`);
        });
        this.peerConnections.clear();

        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        window.location.href = '/';
    }

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    cleanup() {
        this.stopHosting();
        if (this.socket) {
            this.socket.disconnect();
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–≥–¥–∞ DOM –∑–∞–≥—Ä—É–∂–µ–Ω
document.addEventListener('DOMContentLoaded', () => {
    window.hostController = new HostController();
    
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.addEventListener('beforeunload', () => {
        if (window.hostController) {
            window.hostController.cleanup();
        }
    });
});
